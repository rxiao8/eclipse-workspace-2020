/** Rose X.
 * September 2020
 * Write the main method for the Audio class
 */

import java.util.Arrays;
import java.util.Scanner;
import  java.io.File;
import  java.io.IOException;
import  javax.sound.sampled.AudioFormat;
import  javax.sound.sampled.AudioInputStream;
import  javax.sound.sampled.AudioSystem;
import  javax.sound.sampled.DataLine;
import  javax.sound.sampled.LineUnavailableException;
import  javax.sound.sampled.SourceDataLine; 


public class AudioStats {

	public static void main(String[] args) { 
		double [] values = {1, 2, 3, 4, 5};
		double total = 0;
		for (double element: values) {
			total += element;
		}
		
		double average = 0;
		if (values.length > 0) {
			average = total/values.length;
		}
		System.out.println(average);
		
		//standard deviation
		/* take the average
		 * substract each number from average and square it
		 * take the average of all the differences
		 * Square root the variance
		 */
		double newTotal = 0;
		for (double element: values) {
			double difference = Math.abs(average - element);
			double sqrDifference = Math.pow(difference, 2);
			newTotal += sqrDifference;
			
		double deviation = 0;
		
		if (values.length > 0) {
			double variance = newTotal/values.length;
			deviation = Math.sqrt(variance);
		}
		
		System.out.println(deviation);
		//Returns file name
		Scanner in = new Scanner(System.in);
		System.out.println("Enter a .wav file name: ");
		String fileName = in.next();
		System.out.println(fileName);
		
		// 8000 samples per second
		int bytesPerFrame = audioFormat.getFrameSize(values);
		double sampleRate = audioFormat.getSampleRate(values);
		double seconds = audioData * bytesPerFrame * sampleRate;
		System.out.println(seconds);
		
		double sample = seconds * sampleRate
		
		//reverse
		int counter = 0;
		int INITIAL = (int) 1E10;
		int [] logicalSize = new int [INITIAL];
		for (counter = 0; counter < audioData.length && audioData[counter] != 0; counter++) {
			logicalSize [counter] = audioData[counter];
			if (counter == audioData.length) {
				logicalSize = Arrays.copyOf(logicalSize, 2 * logicalSize.length);
			}
			
		}
		int [] reverse = new int [logicalSize.length];
		int reverseCounter = 0;
		for (counter = logicalSize.length -1; counter > 0; counter--) {
			reverse[reverseCounter] = logicalSize[counter];
			reverseCounter++;
			
		}
		
		//compress
		}
	}
}

		
		

